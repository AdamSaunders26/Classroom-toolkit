generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// model User {
//   id         String    @id @default(cuid())
//   title      String
//   first_name String
//   last_name  String
//   email      String?   @unique
//   createdAt  DateTime  @default(now()) @map(name: "created_at")
//   updatedAt  DateTime  @updatedAt @map(name: "updated_at")
//   CTClasses  CTClass[]
  

//   @@map(name: "users")
// }
model User {
  id            String    @id @default(cuid())
  
  name    String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  CTClasses     CTClass[]
  accounts      Account[]
  sessions      Session[]
}

 model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CTClass {
  id        Int     @id @default(autoincrement())
  name      String
  pupils    Pupil[]
  yearGroup String
  teacher   User    @relation(fields: [teacherId], references: [id])
  teacherId String
}

model Pupil {
  id         Int     @id @default(autoincrement())
  first_name String
  last_name_initials  String?
   CTClass    CTClass @relation(fields: [CTClassId], references: [id])
  CTClassId  Int
 
}
